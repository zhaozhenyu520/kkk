1.jsp内置对象有哪些?

	1.requst 2.response 3.session 4.application 5.out 6.pageContext 7.config 8.cookie 9.exception

2.分别用oracle mysql sqlserver 分别获取当前时间
	
	MySql获取当前时间:
		SELECT NOW() AS Systemtime;
	        SELECT SYSDATE() AS Systemtime

	Oracle获取当前时间: 
		select sysdate from dual;
		select Current_date from dual;
		select SYSTIMESTAMP from dual;

	SqlServer获取当前时间:  	
		select getData();


3.el表达式循环输出后台返回的list集合

	<c:Foreach item="${list}" var="list">
	 <p>${list.name}</p>
	</c:Foreach>


4.编译执行结果:执行结果是x=5;
为class StaticStuff{

static int x=10;

static {x+=5:}

public static void main(String args[]){

	System.out.println("x="+x);

}

static {x/=3;}



5.AOP是什么?有什么特点?

	AOP是Aspect Oriented Programming的缩写,意为;面向切面编程,通过预编译方式和运行期动态代理实现程序功能的同意的一种技术
	主要的功能是:日志记录，性能统计，安全控制，事务处理，异常处理






6.谈谈springmvc的理解

	1.它是基于组件技术的，全部的应用对象，无论控制器和视图，还是业务对象之类的都是java组件，并且和Spring提供的其他基础结构紧密集成

	2.不依赖于Servlet APi(目标虽是如此，但是在实现的时候确实是依赖于Servlet的)
	..
	4.它应是易于扩展的






7.简单描述servelt生命周期
	
	1.新生:new (容器 创建一个Servlet对象,只创建一次)
	
	2.初始化:init()方法，服务器启动或第一次请求是调用(可以通过配置更改初始化的时间和顺序)，只初始化一次
	
	3.提供服务：Service(doGet/doPost),执行多次

	4.销毁:destroy();执行-次（服务器关闭或出现异常时调用）

	5.垃圾回收




8.java支持的数据类型有哪些?

	Java中的8种基本数据类型：boolean byte char short int float double long




9.java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思?

	方法重载：Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。

	方法覆盖:方法覆盖是说子类重新定义了父类的方法,方法覆盖必须有相同的方法名，参数

表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。







10.java支持多继承么?

 	Java中，类不支持多继承，接口支持多继承





11.简述接口和抽象类的区别是什么?

	1.接口中所有的方法隐含的都是抽象的，而抽象类则可以同时包含抽象和非抽象的方法。
	
	2.类如果要实现一个接口，他必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象类
	
	3.java接口中声明的变量默认都是final,抽象类可以包含非final的变量
	
	4.接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。






12.当前一个对象被当做参数传递到一个方法后，此方法可改变这个对象的属性，并返回变化后的结果，那么这里到底是值传递还是引用传递?

	是值传递，java变成语言只有值传递参数，当一个对象实例化作为一个参数被传递到方法

中时，参数的值就是该对象的引用一个副本。指向同一个对象，对象的内容可以再被调用的方法中改

变，但对象的应用(不是引用的副本)是永远不会改变的




13.请说明java中final,finally,finalize的区别?
`
	1.final用于声明属性，方法和类，分别表示属性不可交变，方法不可覆盖，类不可继承。
	
	2.finally是异常处理语句结构的一部分，表示总是执行
	
	3.finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法,供垃圾手机时的其他资源
回收，例如关闭文件等




14.java中,try{}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候执行，在return前还是后?

	会执行，try{}中的return执行后在没有返回数据时先去执行finally{}中的代码，然后再返回。所以说finally在
return中间执行







15.什么是java序列化，如何实现java序列化?序列化有什么作用(或什么时候用到)?

	序列化是将对象转换成二进制。给需要序列化的类实现Serializabel接口,可以方便传输，





16.javaScript如何引用jsp中java片段中的变量，请分俩种情况进行说明




17.阐述下int 与 integer,double与Double的通俗区别

	double，int是基本数据类型，而Double，Integer是他们的封装类



18.自己所认识的应用服务器有哪一些?

	tomcat node Apache




19.说出数据库连接池的工作机制是什么?

	数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由最小数据库连接数来设定的。无论这些数据库连接是否被使用，连接池
都将一直保证至少拥有这么多的连接数量，连接池的最大数据库限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将会被
加入到等待队列中。







20.你所知道的集合类都有那些?主要方法?

	1.ArrayList类实现了可变大小的数组，他允许所有元素，包括null。ArrayList没有同步。

	主要有size，isEmpty,get,set,add方法





21.switch语句能否作用早byte上,能否作用在long上,能否作用在String上?

	1.byte short char都是隐性int类型都可以，以及他们的包装类

	2.long 不行

	3.String也可以，要求case中也为String类型




22.静态变量和实例变量的区别?

	1.静态变量也叫类变量，前加了static修饰符。可以直接用类名调用，也可以用对象调用，而且所有对象的同一个类变量都是共享同一块内存空间。
	
	2.实例变量也叫对象变量，没有加static修饰符。只能通过实例化对象调用，而且所有对象的同一个实例变量是共享不同的内存空间的。



23.
List<String>a=new ArrayList<String>();
List<String>b=new ArrayList<String>();
a.add("1");a.add("2");a.add("3");
b.add("4");b.add("5");b.add("6");
请写出计算a与b的交集，合集的方法


24.触发器分为事前触发和事后触发，这俩种触发有和区别，语句触发和行级触发有什么区别
	
	1.事前触发器运行于触发事件发生之前，而事后触发器运行于触发事件发生之后。通常事前触发器可以获取事件之前和新的字段值。
	3.语句级触发器可以在语句执行前或后执行，
	4.而行级触发在触发器所影响的每一行触发一次。


25.列举一些数据库优化方面的列子。

	1.不使用子查询
	
	2.避免函数索引

	3.用IN来替换OR

	4.LIKE双百分号无法使用到索引

	5、读取适当的记录LIMIT M,Ns

	6、避免数据类型不一致

26.WEB应用中,我们经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串?


	public String translate(String str){
	String tempStr="";
	try{
	   
             tempStr =new String (Str.getBytes("ISO-8859-1","GBK"));
	     tempStr=tempStr.trim();
	
	
	}catch(Exception e){
	System.out.println(e.Message);
	}
	return tempStr;
	}


27.Hidernate工作原理及为什么要用？

	1.hibernate是一个开源框架，它是对象关联关系映射的框架，它对JDBC做了轻量级的封装，而我们java程序员可以使用面向对象的思想来操纵数据库

	2.为什么要用hibernate：1. 对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。2. Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作3. hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。4. hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。
